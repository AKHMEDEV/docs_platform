datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//userRoles
enum Role {
  USER
  ADMIN
}

//reactions enum
enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id             String          @id @default(uuid())
  username       String
  email          String          @unique
  password       String
  role           Role            @default(USER)
  refreshToken   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  documentations Documentation[] @relation("UserDocumentations")
  comments       Comment[]       @relation("UserComments")
  reactions      Reaction[]      @relation("UserReactions")
}

model Documentation {
  id         String   @id @default(uuid())
  title      String
  content    String   @db.Text
  views      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
  authorId   String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author   User     @relation(name: "UserDocumentations", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  comments  Comment[]
  reactions Reaction[]
}

model Comment {
  id         String   @id @default(uuid())
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   String
  documentId String
  parentId   String?

  author   User          @relation(name: "UserComments", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  document Documentation @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parent   Comment?      @relation("ReplyTo", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  replies   Comment[]  @relation("ReplyTo")
  reactions Reaction[]
}

model Category {
  id             String          @id @default(uuid())
  name           String          @unique
  description    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  documentations Documentation[]
}

model Reaction {
  id         String       @id @default(uuid())
  type       ReactionType
  createdAt  DateTime     @default(now())
  userId     String
  documentId String?
  commentId  String?

  user     User           @relation(name: "UserReactions", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  document Documentation? @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment  Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
